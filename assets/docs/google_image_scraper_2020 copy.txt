{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "import io\n",
    "import os\n",
    "from PIL import Image\n",
    "import random\n",
    "import requests\n",
    "import selenium\n",
    "from selenium import webdriver\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def collect_thumbnails(wd, n_skip = 0):\n",
    "    if n_skip != 0 : is_load_button(wd)\n",
    "    scroll_to_end(wd)\n",
    "    thumbnails = wd.find_elements_by_css_selector(\"img.Q4LuWd\")\n",
    "    print('There are currently {} thumbnails selected'.format(len(thumbnails)))\n",
    "    return thumbnails[n_skip:]\n",
    "\n",
    "def is_load_button(wd):\n",
    "    time.sleep(7)\n",
    "    load_more_button = wd.find_element_by_css_selector(\".mye4qd\")\n",
    "    if load_more_button:\n",
    "        print('Load button found. Loading new images now.')\n",
    "        time.sleep(3)\n",
    "        wd.execute_script(\"document.querySelector('.mye4qd').click();\")\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def collect_thumbnail_urls(wd, thumbnails):\n",
    "    urls = set()\n",
    "    for tb in thumbnails:\n",
    "        try:\n",
    "            tb.click()\n",
    "            time.sleep(3)\n",
    "        except:\n",
    "            print('Unable to select element: stale reference or insufficient load time')\n",
    "            continue\n",
    "        full_imgs = wd.find_elements_by_css_selector('img.n3VNCb')\n",
    "        for img in full_imgs:\n",
    "            try:\n",
    "                url = img.get_attribute('src')\n",
    "                if url and 'http' in url: \n",
    "                    urls.add(url)\n",
    "            except:\n",
    "                print('Unable to capture URL from full_size image. Trying the next image')\n",
    "    return urls\n",
    "\n",
    "#helper method to identify when a google search result is maxed out\n",
    "def count_total_thumbnails(wd):\n",
    "    thumbnails = wd.find_elements_by_css_selector(\"img.Q4LuWd\")\n",
    "    return len(thumbnails)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def collect_image_urls(query, n_urls, rest_time, wd):\n",
    "    \n",
    "    urls = set()\n",
    "\n",
    "    #Google Query Construction\n",
    "    search_url = \"https://www.google.com/search?safe=off&site=&tbm=isch&source=hp&q={q}&oq={q}&gs_l=img\"\n",
    "\n",
    "    # Load the page\n",
    "    wd.get(search_url.format(q=query))\n",
    "\n",
    "    scroll_placeholder = 0\n",
    "    print('urls length = {}'.format(len(urls)))\n",
    "\n",
    "    while len(urls) < n_urls and scroll_placeholder <  count_total_thumbnails(wd):\n",
    "        print('n_urls equals ' + str(n_urls))\n",
    "        print('the total number of thumbnails is {}. The scroll placeholder variable is {}'.format(count_total_thumbnails(wd), scroll_placeholder))\n",
    "        print('urls length = {}'.format(len(urls)))\n",
    "        print(\"Scanned {} thumbnails\".format(scroll_placeholder))\n",
    "        thumbnails = collect_thumbnails(wd, scroll_placeholder)\n",
    "        batch_urls = collect_thumbnail_urls(wd, thumbnails)\n",
    "        scroll_placeholder += len(thumbnails)\n",
    "        urls = urls.union(batch_urls)\n",
    "    print ('Completed scraping images for {} . Successfully scraped {} image urls!'.format(query, len(urls)))\n",
    "    return urls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# fix here\n",
    "def save_image(url, cd, key, query):\n",
    "\n",
    "    try:\n",
    "        response = requests.get(url).content\n",
    "        \n",
    "    except:\n",
    "        print('Unable to download image from {}...\\n Moving on to next url'.format(url[:20]))\n",
    "    \n",
    "    \n",
    "    random_ext = random.randint(1000000, 9999999)\n",
    "    \n",
    "\n",
    "    try:\n",
    "        image_path = cd + '/' 'images' + '/' + key + '/' + query + '/' + query + '_' + str(random_ext) + '.jpg'\n",
    "        image_file = io.BytesIO(response)\n",
    "        image = Image.open(image_file).convert('RGB')\n",
    "        \n",
    "        try:\n",
    "            with open (image_path, 'wb') as img:\n",
    "                image.save(img, \"JPEG\", quality = 85)\n",
    "                print('Saved image to {}'.format(image_path))\n",
    "                \n",
    "        except Exception as e:\n",
    "            print('Issue with saving image content. Error: {}'.format(e))\n",
    "            print(image_path)\n",
    "            \n",
    "        \n",
    "    except Exception as e:\n",
    "        print('Unable to complete save: {} \\n Moving onto next image...'.format(e))\n",
    "\n",
    "#test Save Image\n",
    "url = 'https://www.thespruce.com/thmb/iLMS8yDu2YpdkxM2YW9uI6rOS4U=/2000x2000/smart/filters:no_upscale()/purple-lilac-big-56a582865f9b58b7d0dd3a97.jpg'\n",
    "cd = '/Users/ems/Desktop/full_scraping_test'\n",
    "save_image(url, cd, 'flowers', 'lilac')\n",
    "# /Users/ems/Desktop/complete/images/flowers/lilac"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Helper Methods\n",
    "def scroll_to_end(wd):\n",
    "    wd.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n",
    "    time.sleep(5)\n",
    "    \n",
    "def create_directories(cd, key, values):\n",
    "    root_images = cd + '/' + 'images'\n",
    "    root_images_with_key = root_images + '/' + key\n",
    "    root_csvs = cd + '/' + 'csvs'\n",
    "    \n",
    "    for path in [cd, root_images, root_images_with_key, root_csvs]:\n",
    "        if not os.path.exists(path):\n",
    "            print('No path at {}. \\n Creating new directory!'.format(cd))\n",
    "            os.mkdir(path)\n",
    "    for v in values:\n",
    "        print(v)\n",
    "        query_image_file= root_images_with_key + '/' + v\n",
    "        if not os.path.exists(query_image_file):\n",
    "            os.mkdir(query_image_file)\n",
    "\n",
    "test_cd = '/Users/ems/Desktop/full_scraping_test'\n",
    "query_dict = {\"flowers\": ['rose', 'lilac']}\n",
    "create_directories(test_cd, 'key', ['query1', 'query2'])\n",
    "# cd/images/flower/petunia10293846.png\n",
    "# cd/csv/flower_petunia.csv\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def save_urls_to_csv(arr, key, query, cd):\n",
    "        \n",
    "    query_as_csv = key.replace(' ', '_') + '_' + query.replace(' ', '_') + '.csv'\n",
    "    file_path = (cd + '/' + 'csvs' + '/' + query_as_csv)\n",
    "    \n",
    "    op = 'a' if os.path.exists(file_path) else 'w'\n",
    "        \n",
    "    with open(file_path, op, newline = '') as output_csv:\n",
    "        output_writer = csv.writer(output_csv)\n",
    "        for item in arr:\n",
    "            output_writer.writerow([item])\n",
    "# save_urls_to_csv(['aaa', 'bbbb'], 'key', 'nubbles', test_cd)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To use this script:<br><br>\n",
    "    1) Enter your google search term below:<br><br>\n",
    "    2) Enter a path for storing images<br><br>\n",
    "        -This script will create a directory if one does not exist.<br>\n",
    "        -This directory will be named for the search term<br><br>\n",
    "    3) The script works as follows:<br>\n",
    "        -Scrolls through google search results and saves n unique URLs to a csv<br>\n",
    "        -Revisits CSV and downloads image from each URL<br>\n",
    "    <br><br>\n",
    "    If you have multiple search terms, input them as a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "urls = set()\n",
    "pause_time = 1\n",
    "DRIVER_PATH = '/usr/local/bin/chromedriver'\n",
    "cd = '/Users/ems/Desktop/full_scraping_test'\n",
    "query_dict = {\"guns\": ['glock', 'AR-15']}\n",
    "n_urls =30\n",
    "\n",
    "\n",
    "def execute_program(query_dict, cd, n_urls):\n",
    "\n",
    "    try:\n",
    "        os.chdir(cd)\n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "        print('Current working directories: ' + os.getcwd())\n",
    "        \n",
    "    wd = webdriver.Chrome(executable_path=DRIVER_PATH)\n",
    "    \n",
    "\n",
    "    try:\n",
    "        for query in query_dict.items():\n",
    "            urls = set()\n",
    "            create_directories(cd, query[0], query[1])\n",
    "            print('directiories created!')\n",
    "\n",
    "            for v in query[1]:\n",
    "                new_url_batch = collect_image_urls(v, n_urls, 5, wd)\n",
    "                urls = urls.union(new_url_batch)\n",
    "                save_urls_to_csv(urls, query[0], v, cd)\n",
    "                \n",
    "                for url in new_url_batch:\n",
    "                    save_image(url, cd, query[0], v)\n",
    "            \n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "        wd.quit()\n",
    "    return \n",
    "\n",
    "execute_program(query_dict, cd, n_urls)\n",
    "        \n",
    "\n",
    "\n",
    "#Google implemented limits on all google image search results. Thus, multiple searches\n",
    "# may need to be conducted with synonyms (ex. canine, dog). Queries can be passed as \n",
    "# key-value pairs (with the key acting as the directory name) or as a list. This should \n",
    "# allow for more efficient searching. \n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
